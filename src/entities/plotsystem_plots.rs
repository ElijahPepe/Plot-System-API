//! SeaORM Entity. Generated by sea-orm-codegen 0.5.0

use super::sea_orm_active_enums::Status;
use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Serialize, Deserialize)]
#[sea_orm(table_name = "plotsystem_plots")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub city_project_id: i32,
    pub difficulty_id: i32,
    pub create_player: String,
    pub owner_uuid: Option<String>,
    pub review_id: Option<i32>,
    pub member_uuids: Option<String>,
    pub status: Status,
    pub mc_coordinates: String,
    pub score: Option<i32>,
    pub last_activity: Option<DateTime>,
    pub create_date: DateTime,
    pub pasted: i8,
    #[sea_orm(column_type = "Custom(\"LONGTEXT\".to_owned())", nullable)]
    pub outline: Option<String>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::plotsystem_city_projects::Entity",
        from = "Column::CityProjectId",
        to = "super::plotsystem_city_projects::Column::Id",
        on_update = "Restrict",
        on_delete = "Restrict"
    )]
    PlotsystemCityProjects,
    #[sea_orm(
        belongs_to = "super::plotsystem_difficulties::Entity",
        from = "Column::DifficultyId",
        to = "super::plotsystem_difficulties::Column::Id",
        on_update = "Restrict",
        on_delete = "Restrict"
    )]
    PlotsystemDifficulties,
    #[sea_orm(
        belongs_to = "super::plotsystem_builders::Entity",
        from = "Column::CreatePlayer",
        to = "super::plotsystem_builders::Column::Uuid",
        on_update = "Restrict",
        on_delete = "Restrict"
    )]
    PlotsystemBuilders2,
    #[sea_orm(
        belongs_to = "super::plotsystem_builders::Entity",
        from = "Column::OwnerUuid",
        to = "super::plotsystem_builders::Column::Uuid",
        on_update = "Restrict",
        on_delete = "Restrict"
    )]
    PlotsystemBuilders1,
    #[sea_orm(
        belongs_to = "super::plotsystem_reviews::Entity",
        from = "Column::ReviewId",
        to = "super::plotsystem_reviews::Column::Id",
        on_update = "Restrict",
        on_delete = "Restrict"
    )]
    PlotsystemReviews,
}

impl Related<super::plotsystem_city_projects::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::PlotsystemCityProjects.def()
    }
}

impl Related<super::plotsystem_difficulties::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::PlotsystemDifficulties.def()
    }
}

impl Related<super::plotsystem_reviews::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::PlotsystemReviews.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
